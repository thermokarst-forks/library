name: ci-cd

# build on every PR and commit to master
on:
  pull_request:
  push:
    branches:
      - master

jobs:
  build:
    name: build-and-test
    runs-on: ubuntu-latest

    services:
      postgres:
        # Docker Hub image
        image: postgres
        env:
          POSTGRES_PASSWORD: spleen
          POSTGRES_DB: qiime2-library
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      rabbitmq:
        # Docker Hub image
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: user
          RABBITMQ_DEFAULT_PASS: spleen2
        ports:
          - 5672:5672
        options: >-
          --health-cmd "rabbitmqctl node_health_check"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: set up python
      uses: actions/setup-python@v1
      with:
        python-version: 3.8

    - name: install and set up dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/production.txt
        pip install -q flake8
        pip install -q https://github.com/qiime2/q2lint/archive/master.zip

    - name: run tests
      env:
        ADMINS: "[(foo,foo@example.com)]"
        ALLOWED_HOSTS: localhost
        DATABASE_URL: postgres://postgres:spleen@localhost:5432/qiime2-library
        RABBITMQ_URL: amqp://user:spleen2@localhost:5672
        DISCOURSE_SSO_SECRET: peanut
        DJANGO_SETTINGS_MODULE: config.settings.production
        GOOGLE_ANALYTICS_PROPERTY_ID: gwar
        SECRET_KEY: gerg
        AWS_ACCESS_KEY_ID: i
        AWS_SECRET_ACCESS_KEY: scream
        AWS_SES_REGION_NAME: for
        AWS_SES_REGION_ENDPOINT: icecream
      run: |
        flake8
        python manage.py collectstatic --noinput
        celery worker -A config.celery -b pyamqp://user:spleen2@localhost:5672 &
        sleep 15
        python manage.py test --noinput

  deploy-web:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: deploy to dokku instance
        uses: idoberko2/dokku-deploy-github-action@v1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          dokku-host: 'library.qiime2.org'
          app-name: 'webapp'
          # Keeping the following around, in case of emergencies:
          # git-push-flags: --force

  deploy-worker:
    runs-on: ubuntu-latest
    # TODO: uncomment before merging
    # needs: deploy-web
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: install system dependencies
        run: |
          sudo apt update
          sudo apt install software-properties-common
          sudo apt-add-repository --yes --update ppa:ansible/ansible
          sudo apt install ansible

      - name: set up python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible-lint

      - name: ansible-lint
        run: ansible-lint provision.yml

      - name: prepare ssh key
        # TODO: uncomment before merging
        # if: github.ref == 'refs/heads/master'
        env:
          SSH_PRIVATE_KEY: "${{ secrets.SSH_PRIVATE_KEY }}"
        run: |
          echo "$SSH_PRIVATE_KEY" > key.pem
          chmod 600 key.pem

      - name: deploy to infrastructure.qiime2.org
        # TODO: uncomment before merging
        # if: github.ref == 'refs/heads/master'
        run: ansible-playbook -i inventory.yml --private-key=key.pem -u ubuntu --become provision.yml
